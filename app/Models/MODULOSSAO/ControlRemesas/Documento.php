<?php
/**
 * Created by PhpStorm.
 * User: DBenitezc
 * Date: 23/05/2019
 * Time: 06:32 PM
 */

namespace App\Models\MODULOSSAO\ControlRemesas;


use App\Models\CADECO\Empresa;
use App\Models\CADECO\Finanzas\DistribucionRecursoRemesa;
use App\Models\CADECO\Finanzas\DistribucionRecursoRemesaPartida;
use App\Models\CADECO\Fondo;
use App\Models\CADECO\Moneda;
use App\Models\CADECO\Transaccion;
use Illuminate\Database\Eloquent\Model;

class Documento extends Model
{
    protected $connection = 'modulosao';
    protected $table = 'ControlRemesas.Documentos';
    protected $primaryKey = 'IDDocumento';
    public $timestamps = false;

    protected $hidden = ['disponible'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::addGlobalScope(function ($query){
            return $query->has('documentoLiberado')->whereHas('documentoProcesado', function ($query){
                return $query->where('IDProceso', '=', 4);
            });
        });
    }

    public function moneda(){
        return $this->belongsTo(Moneda::class, 'IDMoneda', 'id_moneda');
    }

    public function remesa(){
        return $this->hasMany(Remesa::class, 'IDRemesa', 'IDRemesa');
    }

    public function documentoLiberado()
    {
        return $this->belongsTo(DocumentoLiberado::class, 'IDDocumento', 'IDDocumento');
    }

    public function documentoProcesado(){
        return $this->hasMany(DocumentoProcesado::class, 'IDDocumento');
    }

    public function partidas(){
        return $this->belongsTo(DistribucionRecursoRemesaPartida::class, 'IDDocumento', 'id_documento');
    }

    public function empresa()
    {
        return $this->belongsTo(Empresa::class, 'IDDestinatario', 'id_empresa');
    }

    public function fondo()
    {
        return $this->belongsTo(Fondo::class, 'IDDestinatario', 'id_fondo');
    }

    public function tipoDocumento(){
        return $this->belongsTo(TipoDocumento::class, 'IDTipoDocumento', 'IDTipoDocumento');
    }

    public function origenDocumento(){
        return $this->belongsTo(OrigenDocumento::class, 'IDOrigenDocumento', 'IDOrigenDocumento');
    }

    public function transaccion(){
        return $this->belongsTo(Transaccion::class, 'IDTransaccionCDC', 'id_transaccion');
    }

    public function  scopeDisponiblesParaDistribuir($query, $id_remesa){

        $existentes = DistribucionRecursoRemesa::select('id')->where('id_remesa', '=', $id_remesa)->where('estado','>=', 0)->get()->toArray();
        $documentos = DistribucionRecursoRemesaPartida::select('id_documento')->whereIn('id_distribucion_recurso', $existentes)->where('estado','>=', 0)->get()->toArray();

        return $query->whereNotIn('IDDocumento', $documentos);
    }

    public function getImporteTotalAttribute(){
        if($this->IDMoneda != 1) {
            $moneda = Moneda::with('cambio')->where('id_moneda', '=', $this->IDMoneda)->get()->toArray();
            return $this->MontoTotal * $moneda[0]['cambio']['cambio'];
        }else {
            return $this->MontoTotal;
        }
    }

    public function getImporteTotalProcesadoAttribute(){
        foreach ($this->documentoProcesado as $item){
            if($item->IDProceso == 4){
                $monto = 0;
                $item->MontoAutorizadoPrimerEnvio > 0? $monto = $item->MontoAutorizadoPrimerEnvio:'';
                $item->MontoAutorizadoSegundoEnvio > 0 && $item->MontoAutorizadoSegundoEnvio > $item->MontoAutorizadoPrimerEnvio? $monto = $item->MontoAutorizadoSegundoEnvio:'';

                if($this->IDMoneda != 1) {
                    $moneda = Moneda::with('cambio')->where('id_moneda', '=', $this->IDMoneda)->get()->toArray();
                    return $monto * $moneda[0]['cambio']['cambio'];
                }else {
                    return $monto;
                }
            }
        }
    }

    public function scopeMontoProcesado($query){
        dd('pandita');
    }

    public function getBeneficiarioAttribute()
    {
        if($this->IDTipoDocumento == 12){
             $fondo = Fondo::select('nombre')->where('id_fondo','=', $this->IDDestinatario)->first();
             if($fondo){
                 return $fondo->nombre;
             }
        }else{
            $empresa = Empresa::select('razon_social')->where('id_empresa','=', $this->IDDestinatario)->first();
            if($empresa){
                return $empresa->razon_social;
            }
        }
        return null;
    }
}
