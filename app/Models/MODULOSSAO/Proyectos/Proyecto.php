<?php

namespace App\Models\MODULOSSAO\Proyectos;

use App\Models\MODULOSSAO\BaseDatosObra;
use App\Models\MODULOSSAO\Seguridad\Usuario;
use App\Models\MODULOSSAO\Seguridad\UsuarioProyecto;
use App\Models\MODULOSSAO\UnificacionObra;
use App\Models\SEGURIDAD_ERP\ConfiguracionObra;
use Illuminate\Database\Eloquent\Model;

class Proyecto extends Model
{
    protected $connection = 'modulosao';
    protected $table = 'Proyectos.Proyectos';
    protected $primaryKey = 'IDProyecto';
    public $timestamps = false;
    protected $fillable = ["CantidadExtraordinariasPermitidas"];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::addGlobalScope(function ($query) {

        });
    }

    /**
     * Relaciones
     */
    public function proyectoUnificado()
    {
        return $this->belongsTo(ProyectoUnificado::class, 'IDProyecto', 'IDProyecto');
    }

    public function usuarioProyecto()
    {
        return $this->belongsTo(UsuarioProyecto::class, 'IDUsuario', 'IDUsuario');
    }

    public function tipo()
    {
        return $this->belongsTo(TipoProyecto::class, "IDTipoProyecto", "IDTipoProyecto");
    }

    public function empresa()
    {
        return $this->belongsTo(Empresa::class, "IDEmpresa", "IDEmpresa");
    }

    public function logs()
    {
        return $this->hasMany(ProyectoLog::class, "IDProyecto", "IDProyecto");
    }

    public function unificacionProyectoObra()
    {
        return $this->belongsTo(UnificacionObra::class, "IDProyecto", "IDProyecto")->withoutGlobalScopes();
    }

    /**
     * Scope
     */
    public function scopePorUsuario($query)
    {
        $usuario = Usuario::getUsuario()->first();
        if ($usuario->AccesoTodosProyectos == 1) {
            return $query;
        } else {
            return $query->whereIn('IDProyecto', $usuario->usuarioProyectos->pluck('IDProyecto'));
        }
    }

    public function scopeActivo($query)
    {
        $proyectosActivos = $this->getProyectosActivos();

        return $query->whereIn("IDProyecto", $proyectosActivos);
    }

    public function getProyectosActivos()
    {
        $proyectos = \App\Models\SEGURIDAD_ERP\Proyecto::withoutGlobalScopes()->get();
        $id_proyectos = [];

        foreach ($proyectos as $proyecto){
            $obras = $proyecto->configuracionObras()->withoutGlobalScopes()->get();
            foreach ($obras as $obra)
            {
                if($obra->tipo_obra != 2 and $obra->consulta == 0)
                {
                    $BaseDatosModulosSAO = BaseDatosObra::withoutGlobalScopes()->where("BaseDatos", "=", $proyecto->base_datos)->first();
                    if ($BaseDatosModulosSAO) {
                        $unificacionProyectosObra = UnificacionObra::withoutGlobalScopes()->where("id_obra", "=", $obra->id_obra)
                            ->where("IDBaseDatos", "=", $BaseDatosModulosSAO->IDBaseDatos)->get();
                        foreach ($unificacionProyectosObra as $unificacionProyectoObra) {
                            $id_proyectos[] = $unificacionProyectoObra->IDProyecto;
                        }
                    }
                }
            }
        }
        return $id_proyectos;
    }

    public function getObraSAOAttribute()
    {
        $unificacion = UnificacionObra::withoutGlobalScopes()
            ->where("IDProyecto","=", $this->IDProyecto)
            ->first();

        $base_datos = BaseDatosObra::withoutGlobalScopes()
            ->where("IDBaseDatos", "=", $unificacion->IDBaseDatos)
            ->first();

        $proyecto = \App\Models\SEGURIDAD_ERP\Proyecto::withoutGlobalScopes()
            ->where("base_datos", "=", $base_datos->BaseDatos)
            ->first();

        if($proyecto && $unificacion){
            $configuracion = ConfiguracionObra::withoutGlobalScopes()
                ->where("id_proyecto", "=", $proyecto->id)
                ->where("id_obra", "=", $unificacion->id_obra)
                ->first();
            $obra = $configuracion->nombre;
            return $obra;
        }
    }
}
