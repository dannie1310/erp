<?php
/**
 * Created by PhpStorm.
 * User: EMartinez
 * Date: 03/01/2020
 * Time: 11:05 AM
 */

namespace App\Models\CADECO;


use App\Models\CADECO\Item;
use mysql_xdevapi\Exception;
use App\Models\CADECO\Concepto;

class ItemFactura extends Item
{
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::addGlobalScope(function ($query) {
            return $query->whereHas('factura')->where('estado', '>=', 0);
        });
    }

    public function factura()
    {
        return $this->belongsTo(Factura::class, 'id_transaccion', 'id_transaccion');
    }

    public function inventario()
    {
        return $this->belongsTo(Inventario::class, 'id_item', 'id_item');
    }

    public function inventarioAplicacionManual()
    {
        return $this->belongsTo(Inventario::class, 'item_antecedente', 'id_item');
    }

    public function material()
    {
        return $this->belongsTo(Material::class, 'id_material');
    }

    public function movimiento()
    {
        return $this->belongsTo(Movimiento::class, 'id_item', 'id_item');
    }

    public function itemAntecedente()
    {
        return $this->belongsTo(Item::class, 'item_antecedente', 'id_item');
    }

    public function antecedente()
    {
        return $this->belongsTo(Transaccion::class, 'id_antecedente', 'id_transaccion');
    }

    public function concepto(){
        return $this->belongsTo(Concepto::class, 'id_concepto', 'id_concepto');
    }

    public function getProporcionItemAttribute()
    {
        return $this->importe / $this->factura->monto;
    }

    public function getImporteFormatAttribute(){
        return number_format($this->importe, 2, '.', ',');
    }

    public function getSaldoFormatAttribute(){
        return number_format($this->saldo, 2, '.', ',');
    }

    public function getDescripcionAntecedenteAttribute(){
        if($this->numero == 3){
            return 'Renta de ' . $this->material->descripcion;
        }else if($this->numero == 7){
            return 'Seguros y Fianzas';
        }else if($this->numero == 5){
            return 'Cuotas Sindicales';
        }else{
            // dd($this);
            switch ($this->antecedente->tipo_transaccion){
                case 51:
                    return 'SUBCONTRATO ' . $this->antecedente->numero_folio_format;
                    break;
                case 52:
                    return 'ESTIMACIÓN ' . $this->antecedente->numero_folio_format;
                    break;
                case 33:
                    return $this->material->descripcion;
                    break;
                case 19:
                    return $this->material->descripcion;
                    break;
                default:
                    return 'Item';
            }
        }
    }

    /**
     * Este método implementa la lógica actualización de control de obra del procedimiento almacenado sp_aplicar_pagos
     * y se detona al registrar una orden de pago
     */
    public function actualizaControlObra(OrdenPago $orden_pago)
    {
        $importe = round($orden_pago->monto * -1 * $this->proporcion_item, 2);
        $tipo_cambio = $this->factura->tipo_cambio;
        /**
         * La lógica de actualización del control de obra es distinta dependiendo del tipo de antecedente del item de factura
         */
        switch ($this->numero) {
            case 0:
                try{
                    ItemEntradaAlmacen::find($this->item_antecedente)->actualizaControlObra($this, $orden_pago);
                }
                catch (\Exception $e){
                    abort(500,"item: ".$this->id_item.' caso 0 (Item Entrada) '. $e->getMessage().".");
                }
                break;
            case 1:
                switch ($this->antecedente->tipo_transaccion) {
                    case 51:
                        try{
                            $subcontrato = Subcontrato::withoutGlobalScopes()->find($this->id_antecedente);
                            if($subcontrato){
                                $subcontrato->actualizaControlObra($this, $orden_pago);
                            } else {
                                abort(500,"No se encontró subcontrato para actualizar control de obra en factura: ".$this->factura->referencia." (".$this->factura->id_transaccion.") item: ".$this->id_item.' caso 1-51 (Subcontrato).');
                            }

                        }
                        catch (\Exception $e){
                            abort(500,"item: ".$this->id_item.' caso 1-51 (Subcontrato) '. $e->getMessage().".");
                        }

                        break;
                    case 52:
                        try{
                            $estimacion = Estimacion::withoutGlobalScopes()->find($this->id_antecedente);
                            if($estimacion){
                                $estimacion->actualizaControlObra($this, $orden_pago);
                            } else {
                                abort(500,"No se encontró estimacion.");
                            }
                        }
                        catch (\Exception $e){
                            abort(500,"Item: ".$this->id_item.' caso 1-52 (Estimación): '. $e->getMessage());
                        }
                        break;
                }
                break;
            case 2:

                    if ($this->antecedente->opciones == 1) {
                        try{
                            ItemOrdenCompra::find($this->item_antecedente)->actualizaControlObra($this, $orden_pago);
                        }
                        catch (\Exception $e){
                            abort(500,"Item: ".$this->id_item.' caso 2 opcion 1 (Item Orden de Compra) '. $e->getMessage().".");
                        }

                    } else {
                        try {
                            ItemOrdenRenta::find($this->item_antecedente)->actualizaControlObra($this, $orden_pago);
                        }
                        catch (\Exception $e){
                            abort(500,"Item: ".$this->id_item.' caso 2 (Item Orden de Renta)'. $e->getMessage().".");
                        }
                    }
                break;
            case 3:
                try{
                    ItemEntradaMaquinaria::find($this->item_antecedente)->actualizaControlObra($this, $orden_pago);
                }
                catch (\Exception $e){
                    abort(500,"Item: ".$this->id_item.' caso 3 (Item Maquinaria) '. $e->getMessage().".");
                }
                break;
            case 4:
                if ($this->antecedente->tipo_transaccion == 99) {
                    try{
                        ListaRaya::find($this->id_antecedente)->actualizaControlObra($this, $orden_pago);
                    }
                    catch (\Exception $e){
                        abort(500,"Item: ".$this->id_item.' caso 4-99 (Lista de Raya) '. $e->getMessage().".");
                    }

                } else {
                    try{
                        Prestacion::find($this->id_antecedente)->actualizaControlObra($this, $orden_pago);
                    }
                    catch (\Exception $e){
                        abort(500,"Item: ".$this->id_item.' caso 4 (Prestación) '. $e->getMessage().".");
                    }
                }
                break;
            case 7:
                try{
                    if ($this->inventario) {
                        $this->inventario->monto_pagado = $this->inventario->monto_pagado +
                            round($importe * $this->factura->tipo_cambio, 2);
                        $this->inventario->monto_pagado->save();
                        $this->inventario->distribuirPagoInventarios();

                    } elseif ($this->movimiento) {
                        $this->movimiento->monto_pagado = $this->movimiento->monto_pagado +
                            round($importe * $tipo_cambio, 2);
                        $this->movimiento->save();
                    } else {
                        abort(500, "No se encontró la entidad de de control de obra relacionada con el item de la factura de varios");
                    }
                }
                catch (\Exception $e){
                    abort(500,"Item: ".$this->id_item.' caso 7 (Factura de Varios) '. $e->getMessage().".");
                }
                break;
        }

        $saldo = (($this->saldo - $importe) > 0.01) ? round(($this->saldo - $importe), 2) : 0;
        $this->autorizado = $this->autorizado - $importe;
        $this->saldo = $saldo;
        $this->save();
        $this->registraItemOrdenPago($orden_pago);

    }

    private function registraItemOrdenPago(OrdenPago $orden_pago)
    {
        $importe = round($orden_pago->monto * -1 * $this->proporcion_item, 2);
        $datos = [
            'id_transaccion' => $orden_pago->id_transaccion,
            'item_antecedente' => $this->id_item,
            'importe' => $importe,
        ];
        ItemOrdenPago::create($datos);
    }
}