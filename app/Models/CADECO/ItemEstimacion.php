<?php
/**
 * Created by PhpStorm.
 * User: EMartinez
 * Date: 06/01/2020
 * Time: 08:16 PM
 */

namespace App\Models\CADECO;

use App\Models\CADECO\Estimaciones\EstimacionPartidaEliminada;

class ItemEstimacion extends Item
{
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::addGlobalScope(function ($query) {
            
            //return $query->whereHas('estimacion');

            return $query;
        });
    }

    public function estimacion()
    {
        return $this->belongsTo(Estimacion::class, 'id_transaccion', 'id_transaccion');
    }

    public function contrato()
    {
        return $this->belongsTo(Contrato::class, 'item_antecedente', 'id_concepto');
    }

    public function concepto()
    {
        return $this->belongsTo(Concepto::class, 'id_concepto', 'id_concepto');
    }

    public function movimiento()
    {
        return $this->belongsTo(Movimiento::class, 'id_item', 'id_item');
    }

    public function itemSubcontrato()
    {
        return $this->belongsTo(ItemSubcontrato::class, 'item_antecedente', 'id_concepto')->where('id_transaccion','=', $this->id_antecedente);
    }

    public function estimacionPartidaEliminada()
    {
        return $this->belongsTo(EstimacionPartidaEliminada::class, 'id_item');
    }

    public function getEstimadoAnteriorAttribute($id)
    {
        return Item::where('item_antecedente', '=', $this->item_antecedente)->where("id_transaccion", '<', $id)
            ->where("id_antecedente", '=', $this->id_antecedente)
            ->where('id_concepto', '!=', null)->get()->sum('cantidad');
    }

    public function getAncestrosAttribute()
    {
        $list = array();
        $size = strlen($this->contrato->nivel) / 4;
        $size = strlen($this->contrato->nivel) / 4;
        $first = 4;

        for ($i = 0; $i < $size - 1; $i++) {
            $nivel = substr($this->contrato->nivel, 0, $first);
            $result = $this->contrato->where('id_transaccion', '=', $this->contrato->id_transaccion)->where('id_concepto', '<', $this->item_antecedente)->where('nivel', 'LIKE', $nivel)->get();
            array_push($list, [$result[0]->descripcion, $result[0]->nivel]);
            $first += 4;
        }
        return $list;
    }

    public function getPrecioUnitarioFormatAttribute()
    {
        return '$ ' . number_format($this->precio_unitario,2,'.',',');
    }

    public function getCantidadFormatAttribute()
    {
        return number_format($this->cantidad,2,'.',',');
    }

    public function validarCantidadesPartidas()
    {
        $cantidad_estimada_anterior =((float) $this->itemSubcontrato->cantidad_total_estimada) - ($this->original != [] ? $this->original['cantidad'] : 0);
        if( number_format($this->itemSubcontrato->cantidad,2,".","") < number_format($cantidad_estimada_anterior + $this->cantidad,2,".",""))
        {
            abort(400, 'La cantidad de la partida "'.$this->contrato->descripcion. '": '.number_format(($cantidad_estimada_anterior + $this->cantidad),3,".","").' sobrepasa la cantidad del subcontrato: '. $this->itemSubcontrato->cantidad);
        }
    }
}
