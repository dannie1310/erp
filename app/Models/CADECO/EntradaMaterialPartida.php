<?php
/**
 * Created by PhpStorm.
 * User: DBenitezc
 * Date: 20/08/2019
 * Time: 05:34 PM
 */

namespace App\Models\CADECO;


use App\Models\CADECO\Compras\ItemContratista;

class EntradaMaterialPartida extends Item
{
    protected $fillable = [
        'id_transaccion',
        'id_antecedente',
        'item_antecedente',
        'id_concepto',
        'id_almacen',
        'id_material',
        'unidad',
        'numero',
        'cantidad',
        'cantidad_material',
        'cantidad_mano_obra',
        'importe',
        'precio_unitario',
        'precio_material',
        'precio_mano_obra',
        'cantidad_original1',
        'saldo',
        'anticipo'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::addGlobalScope(function ($query){
            return $query->whereHas('entrada')->where('estado', '>=', 0);
        });
    }

    public function almacen()
    {
        return $this->belongsTo(Almacen::class,'id_almacen');
    }
    public function entrada()
    {
        return $this->belongsTo(EntradaMaterial::class, 'id_transaccion', 'id_transaccion');
    }

    public function inventario()
    {
        return $this->belongsTo(Inventario::class, 'id_item', 'id_item');
    }

    public function concepto()
    {
        return $this->belongsTo(Concepto::class, 'id_concepto', 'id_concepto');
    }

    public function material()
    {
        return $this->belongsTo(Material::class,  'id_material');
    }

    public function movimiento()
    {
        return $this->belongsTo(Movimiento::class, 'id_item', 'id_item');
    }

    public function itemContratista()
    {
        return $this->belongsTo(ItemContratista::class, 'id_item');
    }

    public function ordenCompraPartida()
    {
        return $this->belongsTo(OrdenCompraPartida::class, 'item_antecedente','id_item');
    }

    public function getPagadoRegistroAttribute()
    {
        $anticipo_entrada = round($this->anticipo * $this->precio_unitario * $this->cantidad_original1  /100,2);
        $por_aplicar = $this->ordenCompraPartida->por_aplicar;
        if($anticipo_entrada>$por_aplicar)
        {
            return $por_aplicar;
        }
        else
        {
            return $anticipo_entrada;
        }
    }
}
