<?php
/**
 * Created by PhpStorm.
 * User: EMartinez
 * Date: 03/01/2020
 * Time: 01:21 PM
 */

namespace App\Models\CADECO;

use App\Models\CADECO\Compras\ItemContratista;

class ItemEntradaAlmacen extends Item
{
    protected $fillable = [
        'id_transaccion',
        'id_antecedente',
        'item_antecedente',
        'id_concepto',
        'id_almacen',
        'id_material',
        'unidad',
        'numero',
        'cantidad',
        'cantidad_material',
        'cantidad_mano_obra',
        'importe',
        'precio_unitario',
        'precio_material',
        'precio_mano_obra',
        'cantidad_original1',
        'saldo',
        'anticipo'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::addGlobalScope(function ($query) {
            return $query->whereHas('entrada')->where('estado', '>=', 0);
        });
    }

    public function almacen()
    {
        return $this->belongsTo(Almacen::class, 'id_almacen');
    }

    public function entrada()
    {
        return $this->belongsTo(EntradaMaterial::class, 'id_transaccion', 'id_transaccion');
    }

    public function inventario()
    {
        return $this->belongsTo(Inventario::class, 'id_item', 'id_item');
    }

    public function concepto()
    {
        return $this->belongsTo(Concepto::class, 'id_concepto', 'id_concepto');
    }

    public function getDestinoAttribute()
    {
        if ($this->concepto) {
            return $this->concepto;
        } else {
            return $this->almacen;
        }
    }

    public function material()
    {
        return $this->belongsTo(Material::class, 'id_material');
    }

    public function movimiento()
    {
        return $this->belongsTo(Movimiento::class, 'id_item', 'id_item');
    }

    public function itemsFactura()
    {
        return $this->hasMany(ItemFactura::class,"item_antecedente", "id_item");
    }

    public function itemContratista()
    {
        return $this->belongsTo(ItemContratista::class, 'id_item');
    }

    public function ordenCompraPartida()
    {
        return $this->belongsTo(OrdenCompraPartida::class, 'item_antecedente', 'id_item');
    }

    public function getPagadoRegistroAttribute()
    {
        $anticipo_entrada = $this->importe_anticipo;
        $por_aplicar = $this->ordenCompraPartida->por_aplicar;
        if ($anticipo_entrada > $por_aplicar) {
            return $por_aplicar;
        } else {
            return $anticipo_entrada;
        }
    }

    public function getImporteAnticipoAttribute()
    {
        return round($this->anticipo * $this->precio_unitario * $this->cantidad_original1 / 100, 2);
    }

    /**
     * Este mÃ©todo implementa la lÃ³gica actualizaciÃ³n de control de obra del procedimiento almacenado sp_aplicar_pagos
     * y se detona al registrar una orden de pago
     */
    public function actualizaControlObra(ItemFactura $item_factura, OrdenPago $orden_pago)
    {
        $importe = round($orden_pago->monto * -1 * $item_factura->proporcion_item ,2);
        if($this->inventario){
            $this->inventario->monto_pagado = round($this->inventario->monto_pagado +($importe *  $item_factura->factura->tipo_cambio),2);
            $this->inventario->save();
            $this->inventario->distribuirPagoInventarios();
        } else if($this->movimiento){
            $this->movimiento->monto_pagado = round($this->movimiento->monto_pagado +($importe *  $item_factura->factura->tipo_cambio),2);
            $this->movimiento->save();
        } else
        {
            abort(500, "No se encontrÃ³ la entidad de de control de obra relacionada con el item de la entrada");
        }
        $this->saldo = $this->saldo - $importe;
        $this->save();
    }

}