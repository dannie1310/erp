<?php
/**
 * Created by PhpStorm.
 * User: DBenitezc
 * Date: 20/08/2019
 * Time: 05:49 PM
 */

namespace App\Models\CADECO;


use App\Facades\Context;
use App\Models\CADECO\Compras\ItemContratista;
use Illuminate\Support\Facades\DB;

class SalidaAlmacenPartida extends Item
{
    protected $fillable = [
        'id_transaccion',
        'cantidad',
        'importe',
        'id_almacen',
        'id_concepto',
        'id_material',
        'unidad'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::addGlobalScope(function ($query) {
            return $query->whereHas('salida')->where('estado', '>=', 0);
        });
    }

    public function contratista()
    {
        return $this->belongsTo(ItemContratista::class, 'id_item', 'id_item');
    }

    public function salida()
    {
        return $this->belongsTo(SalidaAlmacen::class, 'id_transaccion', 'id_transaccion');
    }

    public function concepto()
    {
        return $this->belongsTo(Concepto::class, 'id_concepto', 'id_concepto');
    }

    public function inventario()
    {
        return $this->hasMany(Inventario::class, 'id_item', 'id_item');
    }

    public function movimiento()
    {
        return $this->hasMany(Movimiento::class, 'id_item', 'id_item');
    }

    /**
     * Este mÃ©todo implementa la lÃ³gica del stored procedure: sp_salida_material, donde un item de salida puede detonar
     * movimientos e invetnarios asociados a mas de un inventario origen
     **/
    public function salidaMaterial()
    {
        $inventarios_existencia = Inventario::where("id_almacen", "=", $this->salida->id_almacen)
            ->where("id_material", "=", $this->id_material)
            ->where("saldo", ">", 0)
            ->orderBy("id_lote")
            ->get();
        $cantidad = $this->cantidad;
        $importe = 0;

        foreach ($inventarios_existencia as $inventario) {
            if ($cantidad >= $inventario->saldo) {
                if ($this->id_almacen != null) {
                    Inventario::create([
                        'id_almacen' => $this->id_almacen,
                        'id_material' => $this->id_material,
                        'id_item' => $this->id_item,
                        'lote_antecedente' => $inventario->id_lote,
                        'cantidad' => $inventario->saldo,
                        'saldo' => $inventario->saldo,
                        'monto_total' => round($inventario->monto_total * $inventario->saldo / $inventario->cantidad, 2),
                        'monto_pagado' => round($inventario->monto_pagado * $inventario->saldo / $inventario->cantidad, 2),
                    ]);
                } else if ($this->id_concepto != null) {
                    Movimiento::create([
                        'id_concepto' => $this->id_concepto,
                        'id_item' => $this->id_item,
                        'id_material' => $this->id_material,
                        'lote_antecedente' => $inventario->id_lote,
                        'cantidad' => $inventario->saldo,
                        'monto_total' => round($inventario->monto_total * $inventario->saldo / $inventario->cantidad, 2),
                        'monto_pagado' => round($inventario->monto_pagado * $inventario->saldo / $inventario->cantidad, 2),
                    ]);
                }
                $cantidad = $cantidad - $inventario->saldo;
                $importe = round($importe + ($inventario->monto_total * $inventario->saldo / $inventario->cantidad), 2);
                $inventario->disminuyeSaldo($inventario->saldo);
            } else {
                if ($this->id_almacen != null) {
                    Inventario::create([
                        'id_almacen' => $this->id_almacen,
                        'id_material' => $this->id_material,
                        'id_item' => $this->id_item,
                        'lote_antecedente' => $inventario->id_lote,
                        'cantidad' => $cantidad,
                        'saldo' => $cantidad,
                        'monto_total' => round($inventario->monto_total * $cantidad / $inventario->cantidad, 2),
                        'monto_pagado' => round($inventario->monto_pagado * $cantidad / $inventario->cantidad, 2),
                    ]);
                } else if ($this->id_concepto != null) {
                    Movimiento::create([
                        'id_concepto' => $this->id_concepto,
                        'id_item' => $this->id_item,
                        'id_material' => $this->id_material,
                        'lote_antecedente' => $inventario->id_lote,
                        'cantidad' => $cantidad,
                        'monto_total' => round($inventario->monto_total * $cantidad / $inventario->cantidad, 2),
                        'monto_pagado' => round($inventario->monto_pagado * $cantidad / $inventario->cantidad, 2),
                    ]);
                }
                $inventario->disminuyeSaldo($cantidad);
                $importe = round($importe + ($inventario->monto_total * $cantidad / $inventario->cantidad), 2);
                $cantidad = 0;
            }
            $inventario->distribuirPagoInventarios();
            if ($cantidad == 0) {
                break;
            }
        }
        if ($cantidad > 0) {
            abort(400, 'Saldo insuficiente para: '.$this->material->descripcion.', faltante: '.$cantidad);
        }
        /*Se hace el update de este modo para evitar el error ocasionado por el metodo created del observer*/
        $item = SalidaAlmacenPartida::find($this->id_item);
        $item->update(["importe" => $importe]);
    }

    public function getDestinoAttribute()
    {
        if ($this->concepto) {
            return $this->concepto;
        } else {
            return $this->almacen;
        }
    }

    public function scopeItemContratista($query){
        return $this->whereHas('contratista');
    }
}
