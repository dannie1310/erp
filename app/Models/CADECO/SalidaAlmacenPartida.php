<?php
/**
 * Created by PhpStorm.
 * User: DBenitezc
 * Date: 20/08/2019
 * Time: 05:49 PM
 */

namespace App\Models\CADECO;


use App\Facades\Context;
use App\Models\CADECO\Compras\ItemContratista;
use Illuminate\Support\Facades\DB;

class SalidaAlmacenPartida extends Item
{
    protected $fillable = [
        'id_transaccion',
        'cantidad',
        'importe',
        'id_almacen',
        'id_concepto',
        'id_material',
        'unidad'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::addGlobalScope(function ($query){
            return $query->whereHas('salida')->where('estado', '>=', 0);
        });
    }

    public function salida()
    {
        return $this->belongsTo(SalidaAlmacen::class, 'id_transaccion', 'id_transaccion');
    }

    public function concepto()
    {
        return $this->belongsTo(Concepto::class, 'id_concepto', 'id_concepto');
    }

    public function inventario()
    {
        return $this->belongsTo(Inventario::class, 'id_item', 'id_item');
    }

    public function movimiento()
    {
        return $this->belongsTo(Movimiento::class, 'id_item', 'id_item');
    }

    public function registrar($partidas,$salidas)
    {
        try {
            foreach ($partidas as $p) {
                $inventario = Inventario::query()->where( 'id_material', '=', $p[0]['id'] )
                    ->where( 'id_almacen', '=', $salidas['id_almacen'] )
                    ->where( 'saldo', '>', 0 )->orderBy( 'id_lote' )->get()->toArray();

                if($inventario == []){
                    abort(400,"La cantida es mayor a la existencia");
                }
                if($salidas['opciones'] == 1){
                    $item = $this->create( [
                        'id_concepto' => $p[2]['id'],
                        'id_material' => $p[0]['id'],
                        'unidad' => $p[0]['unidad'],
                        'cantidad' => $p[1],
                        'id_transaccion' => $salidas['id_transaccion']
                    ] );
                }
                else {
                    $item = $this->create( [
                        'id_almacen' => $p[2]['id'],
                        'id_material' => $p[0]['id'],
                        'unidad' => $p[0]['unidad'],
                        'cantidad' => $p[1],
                        'id_transaccion' => $salidas['id_transaccion']
                    ] );
                }
                foreach ($inventario as $i) {
                    $monto = $i['monto_total'] / $i['cantidad'];
                    if ($p[1] <= 0) {
                        break;
                    } else {
                        if ($p[1] >= $i['saldo']) {
                            $p[1] = $p[1] - $i['saldo'];
                            if($salidas['opciones'] == 1){
                                Movimiento::query()->create( [
                                    'lote_antecedente' => $i['id_lote'],
                                    'id_concepto' => $p[2]['id'],
                                    'id_material' => $p[0]['id'],
                                    'cantidad' => $i['saldo'],
                                    'saldo' => $i['saldo'],
                                    'id_item' => $item['id_item'],
                                    'monto_total' => $monto * $i['saldo'],
                                    'monto_pagado' => $monto * $i['saldo'],
                                ] );
                            }else {
                                Inventario::query()->create( [
                                    'lote_antecedente' => $i['id_lote'],
                                    'id_almacen' => $p[2]['id'],
                                    'id_material' => $p[0]['id'],
                                    'cantidad' => $i['saldo'],
                                    'saldo' => $i['saldo'],
                                    'id_item' => $item['id_item'],
                                    'monto_total' => $monto * $i['saldo'],
                                ] );
                            }
                            Inventario::query()->where( 'id_lote', '=', $i['id_lote'] )->update( ['saldo' => 0] );

                        } else {
                            $i['saldo'] = $i['saldo'] - $p[1];
                            if($salidas['opciones'] == 1){
                                Movimiento::query()->create( [
                                    'lote_antecedente' => $i['id_lote'],
                                    'id_concepto' => $p[2]['id'],
                                    'id_material' => $p[0]['id'],
                                    'cantidad' => $p[1],
                                    'id_item' => $item['id_item'],
                                    'monto_pagado' => $monto * $p[1],
                                    'monto_total' => $monto * $p[1],
                                ] );
                            }else {
                                Inventario::query()->create( [
                                    'lote_antecedente' => $i['id_lote'],
                                    'id_almacen' => $p[2]['id'],
                                    'id_material' => $p[0]['id'],
                                    'cantidad' => $p[1],
                                    'id_item' => $item['id_item'],
                                    'saldo' => $p[1],
                                    'monto_total' => $monto * $p[1],
                                ] );
                            }
                            Inventario::query()->where( 'id_lote', '=', $i['id_lote'] )->update( ['saldo' => $i['saldo']] );
                            break;
                        }
                    }
                }
                if($salidas['opciones'] == 1) {
                    $inventarios = Movimiento::query()->where( 'id_item', '=', $item->id_item )->get()->toArray();
                }else{
                    $inventarios = Inventario::query()->where( 'id_item', '=', $item->id_item )->get()->toArray();

                }
                $monto_total = 0;
                foreach ($inventarios as $invs) {
                    $monto_total = $monto_total + $invs['monto_total'];

                }
                Item::query()->where( 'id_item', '=', $item->toArray()['id_item'] )->update( ['importe' => $monto_total] );
                if($p[4] && $p[5]){
                    ItemContratista::query()->create(['id_item'=> $item->toArray()['id_item'],
                                                    'id_empresa'=>$p[4]['id'],
                                                    'con_cargo'=>$p[5]]);

                }
            }
        }catch (\Exception $e){
            DB::connection('cadeco')->rollBack();
            abort(400, $e->getMessage());
            throw $e;
        }

    }

}