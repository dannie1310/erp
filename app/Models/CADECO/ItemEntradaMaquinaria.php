<?php
/**
 * Created by PhpStorm.
 * User: EMartinez
 * Date: 07/01/2020
 * Time: 08:50 PM
 */

namespace App\Models\CADECO;


class ItemEntradaMaquinaria extends Item
{
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::addGlobalScope(function ($query) {
            return $query->whereHas('entrada')->where('estado', '>=', 0);
        });
    }

    public function almacen()
    {
        return $this->belongsTo(Almacen::class, 'id_almacen');
    }

    public function entrada()
    {
        return $this->belongsTo(EntradaMaquinaria::class, 'id_transaccion', 'id_transaccion');
    }

    public function inventario()
    {
        return $this->belongsTo(Inventario::class, 'id_item', 'id_item');
    }

    /**
     * Este método implementa la lógica actualización de control de obra del procedimiento almacenado sp_aplicar_pagos
     * y se detona al registrar una orden de pago
     */
    public function actualizaControlObra(ItemFactura $item_factura, OrdenPago $orden_pago)
    {
        $importe = round($orden_pago->monto * -1 * $item_factura->proporcion_item ,2);
        $tipo_cambio = $item_factura->factura->tipo_cambio;
        $pago_renta = round($importe * $tipo_cambio,2);
        if($this->inventario){
            if($this->inventario->material->tipo_material == 4)
            {
                $inventarios_relacionados = Inventario::where("id_almacen","=",$this->inventario->id_almacen)
                    ->where("id_material","=", $this->inventario->id_material)
                    ->where("monto_total",">","monto_pagado")
                ->get();
            } else {
                $inventarios_relacionados = Inventario::where("id_almacen","=",$this->inventario->id_almacen)
                    ->where("id_material","=", $this->inventario->id_material)
                    ->where("monto_total",">","monto_pagado")
                    ->where("referencia","=",$this->inventario->referencia)
                    ->get();
            }
            foreach($inventarios_relacionados as $inventario_relacionado){
                $saldo = $inventario_relacionado->monto_total - $inventario_relacionado->monto_pagado ;
                if($pago_renta > 0){
                    if($saldo > $pago_renta){
                        $pago = $pago_renta;
                    } else {
                        $pago = $saldo;
                    }

                    $inventario_relacionado->monto_pagado = $inventario_relacionado->monto_pagado +$pago;
                    $inventario_relacionado->save();

                    $inventario_relacionado->distribuirPagoInventarios();
                    $pago_renta -= $pago;
                }
            }
            if($pago_renta > 0.01) {
                abort(500, "Sobre aplicación de pagos de rentas, almacen:".$this->inventario->almacen->descripcion.", material:".$this->inventario->material->descripcion." ".$item_factura->id_item);
            }
        }  else
        {
            abort(500, "No se encontró el inventario relacionado con el item de la entrada de maquinaria: ".$this->entrada->numero_folio_format);
        }
        $this->saldo = $this->saldo - $importe;
        $this->save();
    }

}